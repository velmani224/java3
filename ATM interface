import java.awt.*;
import java.awt.event.*;

public class SimpleATM extends Frame implements ActionListener {
    private int balance = 0; 
    private TextField amountField;
    private TextArea outputArea;

    public SimpleATM() {
        setTitle("Simple ATM Interface");
        setSize(400, 300); 
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        Panel topPanel = new Panel(new FlowLayout(FlowLayout.CENTER));
        Label titleLabel = new Label("Automated Teller Machine");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        topPanel.add(titleLabel);
        add(topPanel, BorderLayout.NORTH);

        Panel centerPanel = new Panel(new GridLayout(4, 1, 10, 10));
        amountField = new TextField(10);
        centerPanel.add(amountField);

        Panel buttonPanel = new Panel(new FlowLayout(FlowLayout.CENTER, 20, 10));
        Button withdrawButton = new Button("Withdraw");
        withdrawButton.addActionListener(this);
        buttonPanel.add(withdrawButton);

        Button depositButton = new Button("Deposit");
        depositButton.addActionListener(this);
        buttonPanel.add(depositButton);

        Button checkBalanceButton = new Button("Check Balance");
        checkBalanceButton.addActionListener(this);
        buttonPanel.add(checkBalanceButton);

        Button exitButton = new Button("Exit");
        exitButton.addActionListener(this);
        buttonPanel.add(exitButton);

        centerPanel.add(buttonPanel);
        add(centerPanel, BorderLayout.CENTER);

        outputArea = new TextArea(8, 40);
        outputArea.setEditable(false);
        add(outputArea, BorderLayout.SOUTH);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String action = e.getActionCommand();

        switch (action) {
            case "Withdraw":
                int withdrawAmount = Integer.parseInt(amountField.getText());
                if (withdrawAmount > 0 && withdrawAmount <= balance) {
                    balance -= withdrawAmount;
                    showMessage("Withdrawn: $" + withdrawAmount);
                } else {
                    showMessage("Insufficient Balance or Invalid Amount.");
                }
                break;
            case "Deposit":
                int depositAmount = Integer.parseInt(amountField.getText());
                if (depositAmount > 0) {
                    balance += depositAmount;
                    showMessage("Deposited: $" + depositAmount);
                } else {
                    showMessage("Invalid deposit amount.");
                }
                break;
            case "Check Balance":
                showMessage("Current Balance: $" + balance);
                break;
            case "Exit":
                System.exit(0);
                break;
        }

        amountField.setText(""); 
    }

    private void showMessage(String message) {
        outputArea.append(message + "\n");
    }

    public static void main(String[] args) {
        SimpleATM atm = new SimpleATM();
        atm.setVisible(true);
    }
}
